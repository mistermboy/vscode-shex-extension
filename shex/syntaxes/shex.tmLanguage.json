{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ShEx (Shape Expressions)",
	"patterns": [
		{"include": "#iriref"},
		{"include": "#prefixed-name"},
		{"include": "#operators"},
		{"include": "#keywords"},
		{"include": "#atpname"},
		{"include": "#comment"},
		{ "include": "#literals" }
	],
	"repository": {
		"iriref": {
			"name": "entity.name.type.iriref.shex",
			"match": "<[^\\x20-\\x20<>\"{}|^`\\\\]*>"
		},
		"prefixed-name": {
			"name": "constant.complex.shex",
			"match": "(\\w*:)(\\w*)",
			"captures": {
			  "1": {
				"name": "storage.type.PNAME_NS.shex"
			  },
			  "2": {
				"name": "support.variable.PN_LOCAL.shex"
			  }
			}
		  },
		  "operators": {
			"name": "keyword.operator.shex",
			"match": "(?:\\|\\||=|\\*|\/|\\+|-|\\^|\\?)|(?i:or|and)\\s"
		},
		"keywords": {
			"name": "keyword.control.shex",
			"match": "\\b(?i:prefix|import|base|extra|closed|start|iri|bnode|literal|nonliteral|external|length|minlength|maxlength|totaldigits|fractiondigits|mininclusive|maxinclusive|minexclusive|maxexclusive)|a\\b"
		},
		"atpname": {
			"name": "entity.other.inherited-class.shex",
			"match": "(@:.*)|(@<[^\\x20-\\x20<>\"{}|^`\\\\]*>)>"
		},
		  "comment": {
			"name": "comment.line.number-sign.shex",
			"match": "#.*$"
		  },
		  "literals": {
			"patterns": [
			  { "include": "#string"},
			  { "include": "#numeric" },
			  { "include": "#boolean" }
			]
		  },"string": {
			"patterns": [
			  { "include": "#single-squote-string-literal" },
			  { "include": "#single-dquote-string-literal" },
			  { "include": "#triple-squote-string-literal" },
			  { "include": "#triple-dquote-string-literal" },
			  { "include": "#triple-tick-string-literal" }
			]
		  },
			  "single-squote-string-literal": {
				  "name": "string.quoted.single.turtle",
				  "begin": "'",
				  "beginCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.begin.turtle"
					  }
				  },
				  "end": "'",
				  "endCaptures": {
					  "1": {
						  "name": "punctuation.definition.string.end.turtle"
					  },
					  "2": {
						  "name": "invalid.illegal.newline.turtle"
					  }
				  },
				  "patterns": [
					  { "include": "#string-character-escape" }
				  ]
			  },
		  "single-dquote-string-literal": {
				  "name": "string.quoted.double.turtle",
				  "begin": "\"",
				  "beginCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.begin.turtle"
					  }
				  },
				  "end": "\"",
				  "endCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.end.turtle"
					  }
				  },
				  "patterns": [
					  { "include": "#string-character-escape" }
				  ]
			  },
		  "triple-squote-string-literal": {
			"name": "string.quoted.triple.turtle",
			"begin": "'''",
			"end":   "'''",
			"beginCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.begin.turtle"
					  }
				  },
			"endCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.end.turtle"
					  }
				  },
			"patterns": [
					  { "include": "#string-character-escape" }
				  ]
		  },
		  "triple-dquote-string-literal": {
			"name": "string.quoted.triple.turtle",
			"begin": "\"\"\"",
			"end":   "\"\"\"",
			"beginCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.begin.turtle"
					  }
				  },
			"endCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.end.turtle"
					  }
				  },
			"patterns": [
					  { "include": "#string-character-escape" }
				  ]
		  },
		  "triple-tick-string-literal": {
			"name": "string.quoted.triple.turtle",
			"begin": "```",
			"end":   "```",
			"beginCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.begin.turtle"
					  }
				  },
			"endCaptures": {
					  "0": {
						  "name": "punctuation.definition.string.end.turtle"
					  }
				  },
			"patterns": [
					  { "include": "#string-character-escape" }
				  ]
		  },
		  "string-character-escape": {
				  "name": "constant.character.escape.turtle",
				  "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
			  },
		  "numeric": {
			"patterns":[
			  { "include": "#integer" }
			]
		  },
		  "integer": {
			"name": "constant.numeric.turtle",
			"match": "[+-]?(?:\\d+|[0-9]+\\.[0-9]*|\\.[0-9]+(?:[eE][+-]?\\d+)?)"
		  },
		  "boolean": {
			"name": "constant.language.sparql",
			"match": "\\b(?i:true|false)\\b"
		  }

	},
	"scopeName": "shexDoc"
}